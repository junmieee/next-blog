{
  "cacheItemsMap": {
    "pre-rendering.md": {
      "document": {
        "title": "Two Forms of Pre-rendering",
        "date": "2020-01-01T00:00:00.000Z",
        "body": {
          "raw": "\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.",
          "html": "<p>Next.js has two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p>\n<ul>\n<li><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li>\n<li><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li>\n</ul>\n<p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>"
        },
        "_id": "pre-rendering.md",
        "_raw": {
          "sourceFilePath": "pre-rendering.md",
          "sourceFileName": "pre-rendering.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "pre-rendering"
        },
        "type": "Post",
        "url": "/posts/pre-rendering"
      },
      "documentHash": "1679121984957",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "ssg-ssr.md": {
      "document": {
        "title": "When to Use Static Generation v.s. Server-side Rendering",
        "date": "2020-01-02T00:00:00.000Z",
        "body": {
          "raw": "\nWe recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\n- Marketing pages\n- Blog posts\n- E-commerce product listings\n- Help and documentation\n\nYou should ask yourself: \"Can I pre-render this page **ahead** of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.",
          "html": "<p>We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\n<p>You can use Static Generation for many types of pages, including:</p>\n<ul>\n<li>Marketing pages</li>\n<li>Blog posts</li>\n<li>E-commerce product listings</li>\n<li>Help and documentation</li>\n</ul>\n<p>You should ask yourself: \"Can I pre-render this page <strong>ahead</strong> of a user's request?\" If the answer is yes, then you should choose Static Generation.</p>\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"
        },
        "_id": "ssg-ssr.md",
        "_raw": {
          "sourceFilePath": "ssg-ssr.md",
          "sourceFileName": "ssg-ssr.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "ssg-ssr"
        },
        "type": "Post",
        "url": "/posts/ssg-ssr"
      },
      "documentHash": "1679122013290",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "blog/post-01.md": {
      "document": {
        "title": "初投稿 첫 게시글",
        "date": "2021-12-24T00:00:00.000Z",
        "body": {
          "raw": "\nUllamco et nostrud magna commodo nostrud occaecat quis pariatur id ipsum. Ipsum\nconsequat enim id excepteur consequat nostrud esse esse fugiat dolore.\nReprehenderit occaecat exercitation non cupidatat in eiusmod laborum ex eu\nfugiat aute culpa pariatur. Irure elit proident consequat veniam minim ipsum ex\npariatur.\n\nMollit nisi cillum exercitation minim officia velit laborum non Lorem\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\nlabore exercitation irure laborum.\n",
          "html": "<p>Ullamco et nostrud magna commodo nostrud occaecat quis pariatur id ipsum. Ipsum\nconsequat enim id excepteur consequat nostrud esse esse fugiat dolore.\nReprehenderit occaecat exercitation non cupidatat in eiusmod laborum ex eu\nfugiat aute culpa pariatur. Irure elit proident consequat veniam minim ipsum ex\npariatur.</p>\n<p>Mollit nisi cillum exercitation minim officia velit laborum non Lorem\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\nlabore exercitation irure laborum.</p>"
        },
        "_id": "blog/post-01.md",
        "_raw": {
          "sourceFilePath": "blog/post-01.md",
          "sourceFileName": "post-01.md",
          "sourceFileDir": "blog",
          "contentType": "markdown",
          "flattenedPath": "blog/post-01"
        },
        "type": "Post",
        "url": "/posts/blog/post-01"
      },
      "documentHash": "1679376846994",
      "hasWarnings": true,
      "documentTypeName": "Post"
    }
  }
}
